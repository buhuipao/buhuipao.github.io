<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>字典树 on 不会跑</title>
    <link>https://buhuipao.github.io/tags/%E5%AD%97%E5%85%B8%E6%A0%91/</link>
    <description>Recent content in 字典树 on 不会跑</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>© Copyright buhuipao | &lt;a href=&#39;https://beian.miit.gov.cn/&#39; target=&#39;_blank&#39;&gt;粤ICP备2023051785号-1&lt;/a&gt; &lt;script&gt; var _hmt = _hmt || []; (function() { var hm = document.createElement(&#39;script&#39;); hm.src = &#39;https://hm.baidu.com/hm.js?f06b1a2b4a0b17b377b0bfac3f0d1a33&#39;; var s = document.getElementsByTagName(&#39;script&#39;)[0]; s.parentNode.insertBefore(hm, s); })(); &lt;/script&gt;</copyright>
    <lastBuildDate>Thu, 18 May 2017 13:34:59 +0000</lastBuildDate><atom:link href="https://buhuipao.github.io/tags/%E5%AD%97%E5%85%B8%E6%A0%91/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LeetCode－－实现字典树</title>
      <link>https://buhuipao.github.io/2017/05/18/leetcode-imp-trietree/</link>
      <pubDate>Thu, 18 May 2017 13:34:59 +0000</pubDate>
      
      <guid>https://buhuipao.github.io/2017/05/18/leetcode-imp-trietree/</guid>
      <description>class TrieNode(object): def __init__(self): self.is_word = False # 某个节点是否为单词，一般默认为path（路径） # 当有单词录入时，变为True self.leaves = {} class Trie(object): def __init__(self): &amp;#34;&amp;#34;&amp;#34; Initialize your data structure here. &amp;#34;&amp;#34;&amp;#34; self.root = TrieNode() def insert(self, word): &amp;#34;&amp;#34;&amp;#34; Inserts a word</description>
    </item>
    
    <item>
      <title>LeetCode－－字典树的添加和搜索单词</title>
      <link>https://buhuipao.github.io/2017/05/18/leetcode_trietree/</link>
      <pubDate>Thu, 18 May 2017 08:44:26 +0000</pubDate>
      
      <guid>https://buhuipao.github.io/2017/05/18/leetcode_trietree/</guid>
      <description># _*_ coding: utf-8 _*_ &amp;#39;&amp;#39;&amp;#39; 设计一种添加和搜索单词的数据结构 Design a data structure that supports the following two operations: void addWord(word) bool search(word) search(word) can search a literal word or a regular expression string containing only letters a-z or .. A . means it can represent any one letter. For example: addWord(&amp;#34;bad&amp;#34;) addWord(&amp;#34;dad&amp;#34;) addWord(&amp;#34;mad&amp;#34;) search(&amp;#34;pad&amp;#34;) -&amp;amp;gt; false</description>
    </item>
    
  </channel>
</rss>
